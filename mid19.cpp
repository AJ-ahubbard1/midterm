// https://github.com/AJ-ahubbard1/midterm.git

// Modiifed by: Andrew Hubbard
// Date: April 11, 2019
// Coding Midterm for CMPS 3350: Software Engineering
//
//Author: Gordon Griesel
//Date: April 7, 2019
//Purpose: Framework for a coding exam
//
//See instructions on assignment web page to produce a unit-test
//for the vec_length function.
//
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string>
//type defines
typedef double Flt;
typedef Flt Vec[3];

//prototype
Flt vec_length(Vec v);

//Array of vector values
// -1 in 3rd col indicates no length given
const Flt arr[] = {
1.0        ,    0.0         ,       -1          ,
1.0        ,    1.0         ,       -1          ,
-1.2       ,    2.5         ,       -1          ,
99.9       ,    99.9        ,       -1          ,
2.2        ,    -1.2        ,       -1          ,

#ifdef UnitTest
-3.77983   ,    -8.11711    ,       8.945631    ,
-6.19391   ,    -7.48675    ,       9.715759    ,
0.46671    ,    7.98604     ,       8.014661    ,
-3.78165   ,    9.45696     ,       10.200031   ,
-1.08659   ,    -4.1334     ,       4.269271    ,
-1.09663   ,    -4.13138    ,       4.273677    ,
-0.42783   ,    -3.57757    ,       3.609497    ,
9.33954    ,   -1.55691     ,       9.477810    ,
0.07000    ,   3.31899      ,       3.319133    ,
4.83957    ,   -5.88670     ,       7.610853    ,
2.63395    ,   -8.08769     ,       8.508348    ,
-2.86933   ,    7.61333     ,       8.140864    ,
-6.52007   ,    -4.95898    ,       8.192558    ,
-0.09036   ,    -3.03667    ,       3.046420    ,
2.38575    ,   -7.40187     ,       7.778145    ,
0.04122    ,   -6.80627     ,       6.815462    ,
5.51272    ,     1.45683    ,       5.701812    ,
4.57013    ,    9.48918     ,       10.528896   ,
-8.59851   ,    -1.32101    ,       8.696264    ,
-3.70768   ,    6.27192     ,       7.284048    ,
-8.68706   ,    -7.21460    ,       11.291982   ,
-1.25128   ,    9.30296     ,       9.376879    ,
-8.09890   ,    -6.20071    ,       10.200514   ,
-4.00698   ,    -6.99062    ,       8.048112    ,
3.46622    ,    8.09713     ,       8.805252    ,
7.58631    ,    -8.61934    ,       11.490270   ,
-0.94035   ,    3.37630     ,       3.508857    ,
-0.35179   ,    -2.90380    ,       2.924466    ,
-1.11840   ,    -7.72024    ,       7.807282    ,
-8.41728   ,    -2.11187    ,       8.669724    ,
0.68743    ,    -1.37543    ,       1.543106    ,
0.63395    ,    -7.52031    ,       7.540248    ,
9.57682    ,    -2.95578    ,       10.029590   ,
-2.57512   ,    -4.62305    ,       5.297111    ,
7.75325    ,    9.67090     ,       12.391867   ,
-3.23290   ,    1.96071     ,       3.785377    ,
3.24047    ,    5.54636     ,       6.427108    ,
-6.56551   ,    -1.95618    ,       6.853493    ,
5.66838    ,    -2.26684    ,       6.100425    ,
-0.78715   ,    -5.01144    ,       5.071080    ,
1.03279    ,    9.53901     ,       9.602082    ,
-5.08404   ,    -8.89627    ,       10.238272   ,
9.77463    ,    -7.22131    ,       12.148641   ,
3.73940    ,    -4.56671    ,       5.898663    ,
9.97965    ,    1.46945     ,       10.079798   ,
8.51326    ,    5.11009     ,       9.933058    ,
-7.15675   ,    -5.66156    ,       9.125953    ,
-1.67300   ,    -1.11353    ,       2.017969    ,
-1.57452   ,    -5.20144    ,       5.436469    ,
-5.09771   ,    -1.24036    ,       5.240315    ,
0.53834    ,    -6.91867    ,       6.933034    ,
-2.48538   ,    0.40908     ,       2.515655    ,
-8.12148   ,    0.06069     ,       8.131064    ,
-4.82922   ,    -4.55551    ,       6.635159    ,
-1.21708   ,    3.05740     ,       3.296645    ,
-8.05613   ,    5.91589     ,       9.993760    ,
9.71445    ,    0.28716     ,       9.712501    ,
8.04681    ,    4.72145     ,       9.327680    ,
6.80278    ,    7.51230     ,       10.128211   ,
-2.07862   ,    -7.87950    ,       8.147276    ,
1.18118    ,    9.72010     ,       9.796714    ,
-4.83541   ,    -8.23489    ,       9.552163    ,
3.82251    ,    8.43613     ,       9.266237    ,
4.35203    ,    -6.47285    ,       7.803625    ,
2.81431    ,    -5.15347    ,       5.872223    ,
8.56799    ,    -4.02313    ,       9.470644    ,
-6.51083   ,    0.30913     ,       6.518071    ,
1.42963    ,    -0.50014    ,       1.506286    ,
-0.78004   ,    -3.59786    ,       3.684489    ,
-2.83275   ,    8.32878     ,       8.807324    ,
6.76492    ,    4.38949     ,       8.064874    ,
6.91664    ,    7.89187     ,       10.493073   ,
-7.26159   ,    -7.13336    ,       10.169497   ,
-2.15649   ,    8.03831     ,       8.322382    ,
-1.65255   ,    4.36534     ,       4.676382    ,
-6.13480   ,    7.95367     ,       10.046405   ,
-5.64419   ,    7.35067     ,       9.267671    ,
5.67945    ,    0.80175     ,       5.737812    ,
-4.80875   ,    -4.73105    ,       6.737048    ,
-6.83917   ,    -2.25526    ,       7.195529    ,
-0.38863   ,    0.43089     ,       0.586527    ,
-1.53079   ,    9.88279     ,       10.006244   ,
4.24814    ,    -3.46922    ,       5.491683    ,
-5.51555   ,    4.98163     ,       7.429420    ,
2.33230    ,    3.66819     ,       4.344242    ,
-5.53006   ,    -2.12387    ,       5.921947    ,
2.14508    ,    -6.98257    ,       7.308636    ,
-0.23783   ,    9.60791     ,       9.619138    ,
0.03880    ,    -6.58923    ,       6.596723    ,
-6.70644   ,    -8.38403    ,       10.742665   ,
-2.85325   ,    -2.08160    ,       3.532011    ,
-7.09998   ,    -7.14648    ,       10.077750   ,
5.52171    ,    4.83477     ,       7.348163    ,
-7.28910   ,    -8.29981    ,       11.049701   ,
-6.28238   ,    6.42191     ,       8.985911    ,
6.02982    ,    -3.63298    ,       7.035023    ,
-1.22221   ,    -4.31825    ,       4.488481    ,
-3.70228   ,    5.90129     ,       6.968542    ,
-6.18031   ,    -8.73192    ,       10.692754   ,
-6.87840   ,    9.54712     ,       11.774414   ,
4.38189    ,    -8.80390    ,       9.839992    ,
-8.10371   ,    -5.71221    ,       9.908412    ,
9.70970    ,    7.11065     ,       12.040444   ,
-6.52233   ,    -3.05296    ,       7.202277    ,
1.62879    ,    -5.61525    ,       5.853470    ,
9.28604    ,    -1.06013    ,       9.338576    ,
-0.79205   ,    1.44665     ,       1.650156    ,
0.99377    ,    -3.22254    ,       3.366893    ,
-3.02644   ,    -4.39218    ,       5.331138    ,
-1.10439   ,    0.41721     ,       1.178573    ,
-2.47215   ,    -2.42252    ,       3.460711    ,
3.52452    ,    -4.84705    ,       5.987380    ,
-1.46230   ,    -7.41220    ,       7.552249    ,
0.52767    ,    0.45081     ,       0.702692    ,
-8.10254   ,    6.75490     ,       10.550390   ,
-6.46763   ,    8.03804     ,       10.315950   ,
-6.35414   ,    6.73533     ,       9.260672    ,
-2.84746   ,    -2.14044    ,       3.565585    ,
4.43703    ,    -6.50840    ,       7.874292    ,
-2.35545   ,    -6.05310    ,       6.500172    ,
-4.46530   ,    3.19470     ,       5.495247    ,
-6.35449   ,    1.93546     ,       6.636435    ,
-1.30964   ,    -6.13683    ,       6.275777    ,
-8.09879   ,    1.70110     ,       8.269244    ,
-1.56357   ,    6.10445     ,       6.305816    ,
-6.03599   ,    4.23533     ,       7.380951    ,
6.72693    ,    0.95528     ,       6.787968    ,
3.90218    ,    6.47746     ,       7.570395    ,
-0.32785   ,    -8.44029    ,       8.448564    ,
2.49517    ,    -2.70276    ,       3.668621    ,
0.16041    ,    1.29485     ,       1.305338    ,
-7.00405   ,    1.13693     ,       7.095658    ,
-2.75862   ,    -0.30275    ,       2.774869    ,
-6.06742   ,    2.29071     ,       6.495081    ,
-6.75401   ,    1.96902     ,       7.041122    ,
-1.55352   ,    -7.41529    ,       7.583243    ,
-6.85558   ,    -1.91571    ,       7.122564    ,
4.38153    ,    -4.70306    ,       6.421526    ,
5.59179    ,    -3.76660    ,       6.749516    ,
6.37034    ,    -0.78774    ,       6.411609    ,
7.90951    ,    2.04146     ,       8.159599    ,
-5.66783   ,    9.42354     ,       10.992569   ,
1.39256    ,    -5.46741    ,       5.650748    ,
-3.88270   ,    6.31137     ,       7.407689    ,
-5.60434   ,    -4.60604    ,       7.261915    ,
-0.30910   ,    6.72645     ,       6.728058    ,
-7.04014   ,    5.92268     ,       9.208337    ,
-4.86507   ,    -0.10947    ,       4.858449    ,
-8.06801   ,    3.75903     ,       8.895222    ,
3.18257    ,    -5.61187    ,       6.445261    ,
-2.07928   ,    2.56865     ,       3.307424    ,
-1.11998   ,    8.37183     ,       8.448279    ,
-6.23421   ,    -6.79895    ,       9.226543    ,
8.92750    ,    1.37199     ,       9.023245    ,
-2.70533   ,    8.60980     ,       9.025800    ,
-1.49967   ,    -8.84053    ,       8.965700    ,
3.91850    ,    6.36057     ,       7.467137    ,
9.74871    ,    -5.46119    ,       11.171181   ,
6.10746    ,    3.09036     ,       6.839003    ,
1.46219    ,    -8.99283    ,       9.114853    ,
-6.79178   ,    -3.68397    ,       7.717772    ,
6.68801    ,    -6.57596    ,       9.372519    ,
-7.96616   ,    -7.75937    ,       11.119573   ,
-7.59989   ,    -2.11367    ,       7.893417    ,
-5.75310   ,    1.66297     ,       5.981775    ,
5.20177    ,    2.09588     ,       5.608987    ,
-4.81376   ,    0.37246     ,       4.833567    ,
0.37963    ,    1.55987     ,       1.607600    ,
6.87590    ,    5.56107     ,       8.846495    ,
7.98511    ,    5.74664     ,       9.846949    ,
6.98728    ,    0.95888     ,       7.061067    ,
7.84520    ,    -3.48041    ,       8.573716    ,
7.18256    ,    5.12568     ,       8.825914    ,
-2.77844   ,    4.75274     ,       5.506252    ,
-4.87479   ,    7.99028     ,       9.364141    ,
-0.44985   ,    5.93263     ,       5.945370    ,
1.49369    ,    9.81625     ,       9.928169    ,
5.56289    ,    5.53655     ,       7.850674    ,
-3.50457   ,    6.05086     ,       6.986007    ,
-7.42955   ,    -5.35645    ,       9.167819    ,
8.76923    ,    -0.47955    ,       8.777584    ,
-5.72681   ,    3.83092     ,       6.887799    ,
1.82120    ,    -6.54519    ,       6.784229    ,
8.38744    ,    -1.00408    ,       8.446677    ,
-1.18783   ,    -4.21264    ,       4.370453    ,
-8.67608   ,    -3.14231    ,       9.223723    ,
-7.09145   ,    -3.13721    ,       7.748064    ,
0.50634    ,    4.59272     ,       4.619254    ,
-5.88683   ,    3.36937     ,       6.779603    ,
-2.79971   ,    0.66494     ,       2.885506    ,
3.11976    ,    6.68800     ,       7.380909    ,
-4.31609   ,    -4.80975    ,       6.465530    ,
-0.02239   ,    8.74828     ,       8.748095    ,
-4.39403   ,    2.79638     ,       5.205244    ,
8.65917    ,    -3.71915    ,       9.422679    ,
9.87356    ,    3.22554     ,       10.380221   ,
-3.40509   ,    1.70744     ,       3.811609    ,
-7.62762   ,    -4.84215    ,       9.038969    ,
-8.15415   ,    -0.79046    ,       8.188198    ,
3.39979    ,    -3.61233    ,       4.953098    ,
-4.86405   ,    5.89699     ,       7.643386    ,
-1.30663   ,    -1.20020    ,       1.770877    ,
4.08065    ,    -2.75005    ,       4.924455    ,
9.47549    ,    2.95914     ,       9.922140    ,
-5.33343   ,    -2.68597    ,       5.966892    ,
1.47188    ,    -1.31769    ,       1.977451    ,
6.89185    ,    -4.46958    ,       8.214080    ,
0.91810    ,    6.87333     ,       6.939174    ,
2.77033    ,    -4.65203    ,       5.404918    ,
3.14777    ,    -8.94762    ,       9.481722    ,
-2.69767   ,    -6.66569    ,       7.186972    ,
5.29344    ,    7.12357     ,       8.883915    ,
-5.56240   ,    -0.28617    ,       5.574399    ,
7.39614    ,    -5.46994    ,       9.203067    ,
-0.93951   ,    -4.92530    ,       5.023034    ,
-8.05197   ,    6.24868     ,       10.195550   ,
-8.40335   ,    7.82858     ,       11.488313   ,
7.88096    ,    -8.00169    ,       11.225456   ,
-5.66738   ,    -8.84452    ,       10.513068   ,
7.27905    ,    -7.19067    ,       10.222581   ,
1.52316    ,    -7.41495    ,       7.568108    ,
-3.88488   ,    -7.14667    ,       8.138189    ,
-3.07197   ,    -3.21308    ,       4.442560    ,
-6.96440   ,    -2.81319    ,       7.503893    ,
-4.98461   ,    4.77648     ,       6.895700    ,
5.77479    ,    6.34952     ,       8.591873    ,
6.50500    ,    7.04074     ,       9.589232    ,
8.85007    ,    5.31955     ,       10.325631   ,
6.90461    ,    0.12682     ,       6.897896    ,
1.98015    ,    -8.50018    ,       8.735577    ,
-2.71327   ,    -0.65049    ,       2.788912    ,
5.53633    ,    -3.62133    ,       6.625037    ,
-8.84485   ,    -1.66875    ,       9.006609    ,
-5.31922   ,    -1.47230    ,       5.509418    ,
-4.43156   ,    2.77082     ,       5.220086    ,
-1.90962   ,    -1.52949    ,       2.440834    ,
7.59733    ,    2.08427     ,       7.877078    ,
2.58409    ,    -6.78997    ,       7.273880    ,
1.55954    ,    2.26991     ,       2.750446    ,
7.64858    ,    9.14773     ,       11.931689   ,
-2.52101   ,    -1.90435    ,       3.160135    ,
5.62335    ,    -1.22898    ,       5.746278    ,
-8.45815   ,    -4.68464    ,       9.666860    ,
2.78587    ,    7.40205     ,       7.908821    ,
-0.51368   ,    8.64191     ,       8.648289    ,
-8.14806   ,    -3.55365    ,       8.891291    ,
7.71627    ,    -1.86561    ,       7.943715    ,
-2.71787   ,    -4.84506    ,       5.558743    ,
2.25058    ,    -3.09775    ,       3.826230    ,
4.67327    ,    5.26641     ,       7.045885    ,
9.58177    ,    1.67602     ,       9.729215    ,
-0.92193   ,    5.47455     ,       5.559073    ,
4.11646    ,    -8.28847    ,       9.259105    ,
-2.84211   ,    8.57605     ,       9.028798    ,
-3.28956   ,    -4.11276    ,       5.269126    ,
0.04217    ,    2.40758     ,       2.399307    ,
8.30983    ,    0.67455     ,       8.339773    ,
-4.05903   ,    6.23241     ,       7.432414    ,
-2.09157   ,    1.04557     ,       2.344122    ,
-3.47988   ,    8.64122     ,       9.330595    ,
9.63658    ,    9.35275     ,       13.433306   ,
#endif
0.0        ,    0.0         ,       0.0
};   
    
    
int main(int argc, char *argv[])    
{ 
    //Program to calculate vector normalization and length.  
    printf("                                    \n");
    printf("3350 software engineering           \n");
    printf("                                    \n");
    printf("Calculation of vector lengths:      \n");

#ifdef UnitTest    
    //Missing tolerance value on cmdline
    if(argc < 2) {
        printf("\nImproper usage!\n");
        printf("Correct cmdline $ %s <tolerance value>\n\n", argv[0]);
        return 0;
    } 
    //convert char* to float
    char* fc = argv[1];
    std::string fs(fc);    
    float tolerance = std::stof(fs);
    int errors=0;
    
    printf("Unit test of vec_length() function: \n");
    printf("tolerance: %.2lf                    \n",tolerance);
#endif

    printf("                                    \n");
    printf("     x         y         length     ");

#ifdef UnitTest
    printf("actual    ");
#endif
    printf("\n     --------  --------  ----------");
#ifdef UnitTest
    printf(" ----------");
#endif
    printf("\n");
    //read until sentinel found.
    int i=0;
    if(argc > 1) {
        i = 5;
    }
    Vec v = { arr[i*3+0], arr[i*3+1], arr[i*3+2]};
    do {
        if (v[2] == -1) {
            v[2] = vec_length(v);
        }
    if (argc > 1) {
        printf("%3i  %8.5lf  %8.5lf  %10.5lf", i-4,v[0],v[1],v[2]);
    } else    
        printf("%3i  %8.5lf  %8.5lf  %10.5lf", i+1,v[0],v[1],v[2]);

#ifdef UnitTest
        Flt ret = vec_length(v);
        printf(" %10.5lf",ret);
        //tolerance test
        if (abs(ret - v[2]) > tolerance) {
            printf(" <-- error");
            errors++;
        }
#endif
        printf("\n");     
        ++i;
        v[0] = arr[i*3+0];
        v[1] = arr[i*3+1];
        v[2] = arr[i*3+2];
    } while (!(v[0]==0.0 && v[1]==0.0));
    //
#ifdef UnitTest
    printf("\nUnit Test complete.\n");
    printf("errors found: %d\n\n",errors);
#endif
    printf("\nProgram complete.\n\n");

    return 0;
}
#ifdef UnitTest1    
#endif

Flt vec_length(Vec v)
{
    //Program to calculate vector normalization and length.
    //Normalize a vector.
    //Return the original length of the vector.
    //
    //input: the 2 components of a vector
    //output: the pre-normalized vector length is returned
    //        the vector argument is scaled to a length of 1.0
    //
    //A degenerate vector causes an error condition.
    //It will return a length of 0.0
    //and an arbitrary vector with length 1.0.
    //
    //calculate the vector dot product with itself...
    Flt dot = v[0]*v[0] + v[1]*v[1];
    //check for degenerate vector...
    if (dot == 0.0) {
        //set an arbitrary vector of length 1.0
        //printf("ERROR vector magnitude is zero.\n");
        v[0] = 1.0;
        v[1] = 0.0;
        return 0.0;
    }
    //vector has a magnitude so continue.
    Flt len = sqrt(dot);
    Flt oolen = 1.0 / len;
    v[0] *= oolen;
    v[1] *= oolen;
    return len;
}

